name: Publish to PyPI on Main

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check if version changed
      id: check
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "Current version: $CURRENT_VERSION"
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if this version exists on PyPI
        pip install requests
        
        # Create Python script to check version
        cat > check_version.py << 'SCRIPT'
        import requests
        import sys
        import os
        
        version = os.environ.get('VERSION')
        response = requests.get('https://pypi.org/pypi/ai-doc-generator/json')
        if response.status_code == 200:
            releases = response.json().get('releases', {})
            if version in releases:
                print(f'Version {version} already exists on PyPI')
                with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write('should_publish=false\n')
                sys.exit(0)
        else:
            print('Package not found on PyPI or error checking')
        
        print(f'New version {version} detected')
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write('should_publish=true\n')
        SCRIPT
        
        # Run the script
        VERSION=$CURRENT_VERSION python check_version.py

  test:
    needs: check-version
    if: needs.check-version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests
      run: |
        pytest tests --cov=ai_doc_generator

  publish:
    needs: [check-version, test]
    if: needs.check-version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/* --verbose
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.version }}
        name: Release v${{ needs.check-version.outputs.version }}
        body: |
          Automated release of version ${{ needs.check-version.outputs.version }}
          
          Install with: `pip install ai-doc-generator==${{ needs.check-version.outputs.version }}`
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}